function [p, v] = kuiperbelt(N)
%kuiperbelt Creates the initial conditions for the simulation
%
%   Syntax:
%
%       [p v]=kuiperbelt(N)
%
%   Input:
%           * N       = "Number of particles to be simulated" (1)[-]
%                        2 = solar system"                    (1)[-]
%   Output:
%           * p       = "position vector" (3:N)[m]
%           * v       = "velocity vector" (3:N)[m/s]
%
%   Example(s):
%
%       A system of 1.000.000 particles can be creates by
%               [p, v] = kuiperbelt(1e6)
%
%   Dependencies: [-]
%
%   Author: Niels Buijssen
%   Email:  nbuijssen@student.tudelft.nl
%
%   Project: Modelleren 2B Planets
%   Keywords: Planets, Solar system, Initial Conditions
%             
%
%   Version: v1.0 (16-05-2018)
%

%% Change-log
%
%   v1.0 (16-05-2018)
%       * First operational version.
%

%% Input Handling
%   -

%% Main Function

% Define starting parameters 
Mass_sun = 1.988e30; % [kg] mass of sun 
G = 6.67408*10^-11; % [Nm^2kg^-2]
AU = 1.49597871e11;% [m]
r_low = 42*AU;
r_high = 48*AU;

% create position and speed vectors
theta = 2*pi*rand(1,N); % create random angles
% r = r_low + (r_high-r_low).*rand(1,N); % create uniformly distributed radii
r = (3/2)^(2/3)*4495e9;
% r = 4495e9;

ecc = rand(1,N)/8;
a = r; %align semi-minor axis to be at the range R;
b = a * sqrt(1 - ecc.^2);
p = [a.*cos(theta); b.*sin(theta)];
u = G*Mass_sun;
v_norm = [0 1; -1 0]*p(1:2,:)./vecnorm(p(1:2,:));
v = sqrt(u * (2./vecnorm(p) - 1/a)) .* [v_norm];

for i=1:N
    phi = rand(1,1)*2*pi;
    rot = [cos(phi), -sin(phi); sin(phi), cos(phi)]
    p(:,i) = [rot*p(:,i)];
    v(:,i) = [rot*v(:,i)];
end
p = [p; zeros(1,N)];
v = [v; zeros(1,N)];
%% Output Handling
% -

end

